<html>
<head>
  <style type="text/css"> 
    * {
      margin:0;
      padding:0;
    }
    #box {
      background: #55CACE;
      display: block;
      position: absolute;
      width: 100%;
      height: 100%;
    }
    
    #box:active {
        background-color: #2BC5CA;
    }
  </style>
  <script type="text/javascript">

    function Box(inElement)
    {
      var self = this;

      this.element = inElement;

      this.scale = 0.8;
      this.scaled = this.scale;
      this.rotation = 0;
      this.position = '0,0';

      this.element.addEventListener('touchstart', function(e) { return self.onTouchStart(e) }, false);
      this.element.addEventListener('gesturestart', function(e) { return self.onGestureStart(e) }, false);
    }
    Box.prototype = {
      get position()
      {
          return this._position;
      },
      // position strings are "x,y" with no units
      set position(pos)
      {
          this._position = pos;

          var components = pos.split(',')
          var x = components[0];
          var y = components[1];

          const kUseTransform = true;
          if (kUseTransform) {
              this.element.style.webkitTransform = 'translate3d(' + x + 'px, ' + y + 'px, 0) scale('+this.scale+')';
          }
          else {
              this.element.style.left = x + 'px';
              this.element.style.top = y + 'px';
          }
      },
      // position strings are "x,y" with no units
      get x()
      {
          return parseInt(this._position.split(',')[0]);
      },

      set x(inX)
      {
          var comps = this._position.split(',');
          comps[0] = inX;
          this.position = comps.join(',');
      },

      get y()
      {
          return parseInt(this._position.split(',')[1]);
      },

      set y(inY)
      {
          var comps = this._position.split(',');
          comps[1] = inY;
          this.position = comps.join(',');
      },
      onTouchStart: function(e)
      {
          // Start tracking when the first finger comes down in this element
          if (e.targetTouches.length != 1)
              return false;

          this.startX = e.targetTouches[0].clientX;
          this.startY = e.targetTouches[0].clientY;

          var self = this;
          this.element.addEventListener('touchmove', function(e) { return self.onTouchMove(e) }, false);
          this.element.addEventListener('touchend', function(e) { return self.onTouchEnd(e) }, false);
          this.timer = new Date();
          
          return false;
      },
      onTouchMove: function(e)
      {
          // Prevent the browser from doing its default thing (scroll, zoom)
          e.preventDefault();

          this.element.style.webkitTransitionEasingFunction = "ease-in";
          if (new Date()-this.timer < 200) {
            this.element.style.webkitTransitionDuration = "0.2s";
          } else {
            this.element.style.webkitTransitionDuration = "0s";
          }
          
          
          // Don't track motion when multiple touches are down in this element (that's a gesture)
          if (e.targetTouches.length != 1)
              return false;

          var leftDelta = e.targetTouches[0].clientX - this.startX;
          var topDelta = e.targetTouches[0].clientY - this.startY;

          var newLeft = (this.x) + leftDelta;
          var newTop = (this.y) + topDelta;

          this.position = newLeft + ',' + newTop;

          this.startX = e.targetTouches[0].clientX;
          this.startY = e.targetTouches[0].clientY;

          return false;
      },
      onTouchEnd: function(e)
      {
          // Prevent the browser from doing its default thing (scroll, zoom)
          e.preventDefault();
          
          document.getElementById("debug").innerHTML = this.element.style.webkitTransform;

            this._position = pos;

             var components = pos.split(',')
             var x = components[0];
             var y = components[1];
            this.element.style.webkitTransform = 'translate3d(' + x + 'px, ' + y + 'px, 0) scale('+this.scale+')';
            
          
          // Stop tracking when the last finger is removed from this element
          if (e.targetTouches.length > 0)
              return false;

          this.element.removeEventListener('touchmove', function(e) { return self.onTouchMove(e) }, false);
          this.element.removeEventListener('touchend', function(e) { return self.onTouchEnd(e) }, false);

          return false;
      },
      onGestureStart: function(e)
      {
          // Prevent the browser from doing its default thing (scroll, zoom)
          e.preventDefault();
          
          var self = this;
          this.element.addEventListener('gesturechange', function(e) { return self.onGestureChange(e) }, true);
          this.element.addEventListener('gestureend', function(e) { return self.onGestureEnd(e) }, true);
          

          return false;
      },
      onGestureChange: function(e)
      {
          // Prevent the browser from doing its default thing (scroll, zoom)
          e.preventDefault();

          // Only interpret gestures when tracking one object.  Otherwise, interpret raw touch events
          // to move the tracked objects.
          
          var self = this;
          document.getElementById("debug").innerHTML = e.scale;
          this.scale = this.scaled * e.scale;
          this.rotation = e.rotation;
          this.position = this.position;
          
          //this.element.style.backgroundColor = "#CCCCCC";

          return false;
      },
      onGestureEnd: function(e)
      {
          // Prevent the browser from doing its default thing (scroll, zoom)
          e.preventDefault();
          this.scaled = this.scale;

          this.element.removeEventListener('gesturechange', this.gestureChangeHandler, true);
          this.element.removeEventListener('gestureend', this.gestureEndHandler, true);

          return false;
      },
    }
    function loaded(){
      var box = new Box(document.getElementById("box"));
    }
    window.addEventListener('load', loaded, true);
  </script>
</head>
<body>
  <div id="box"></div>
  <div id="debug"></div>
    <h1>test box</h1>
</body>
</html>